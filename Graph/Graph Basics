class Graph{
    constructor(){
        this.adjacencyList={}
    }
    
    addVertex(vertex){
        if(!this.adjacencyList[vertex]){
            this.adjacencyList[vertex]=new Set()
        }
    }
    
    addEdges(vertex1,vertex2){
        if(!this.adjacencyList[vertex1]) this.addVertex(vertex1)
        if(!this.adjacencyList[vertex2]) this.addVertex(vertex2)
        
        this.adjacencyList[vertex1].add(vertex2)
        this.adjacencyList[vertex2].add(vertex1)
    }
    
    removeEdges(vertex1,vertex2){
        this.adjacencyList[vertex1].delete(vertex2)
         this.adjacencyList[vertex2].delete(vertex1)
    }
    
    removeVertex(vertex){
        if(!this.adjacencyList[vertex]) return
        
        for(let adjacentVertex of this.adjacencyList[vertex]){
            this.adjacencyList[adjacentVertex].delete(vertex)
        }
        
       delete this.adjacencyList[vertex]
    }
    
    
    bfs(startValue){
        let visisted=new Set()
        let queue=[startValue]
        let result=[]
        visited.add(startValue)
        
        while(queue.length>0){
            let vertex=queue.shift()
            result.push(vertex)
            
            this.adjacencyList[vertex].forEach((neighbor)=>{
                if(!visited.has(neighbor)){
                    visited.add(neighbor)
                    queue.push(neighbor)
                }
            })
        }
        return result
    }
}
