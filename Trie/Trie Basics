class TrieNode{
    constructor(){
        this.children={}
        this.isEndOfChar=false
    }
}

class Trie{
    
    constructor(){
        this.root=new TrieNode()
    }
     insert(value){
         let node=this.root
         
         for(let char of value){
             if(!node.children[char]){
                 node.children[char]=new TrieNode()
             }
             node=node.children[char]
         }
         node.isEndOfChar=true
     }
     
     search(value){
         let node=this.root
         
         for(let char of value){
             if(!node.children[char]) return false
             node=node.children[char]
         }
         
         return node.isEndOfChar
     }
     
     startsWith(prefix){
         let node=this.root
         
         for(let char of prefix){
            if(!node.children[char]) return false
            node=node.children[char]
         }     
         
         return true
         
     }
     
     suggest(prefix){
         let node=this.root
         
         for(let char of prefix){
             if(!node.children[char]) return []
             node=node.children[char]
         }
         let results=[]
         this.dfs(node,prefix,results)
         return results
     }
     
     dfs(node,prefix,results){
         if(node.isEndOfChar) results.push(prefix)
         for(let char in node.children){
             this.dfs(node.children[char],prefix+char,results)
         }
     }
     
     longestPrefix(){
         let node =this.root
         let prefix=""
         while(true){
             let keys=Object.keys(node.children)
             if(keys.length==1 && !node.isEndOfChar){
                 prefix+=keys[0]
                 node=node.children[keys[0]]
             }else{
                 break
             }
       
         }
         return prefix
     }
     
     delete(word){
         this.deleteWord(this.root,word,0)
     }
     
     deleteWord(node,word,i){
         if(word.length==i){
             if(!node.isEndOfChar) return false
             node.isEndOfChar=false
             return Object.keys(node.children).length===0
         }
         
         let char=word[i]
         let childNode=node.children[char]
         
         if(!childNode) return false
         
         let shouldBeDelete=this.deleteWord(node.children[char],word,i+1)
         
         if(shouldBeDelete){
             delete node.children[char]
             
             return Object.keys(node.children).length===0
         }
         return false
     }
}
